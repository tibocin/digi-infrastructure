# -----------------------------------------------------------------------------
# File: docker-compose.yml
# Purpose: Core infrastructure services for digi-infrastructure
# Related: config/env.example, scripts/init-multiple-databases.sh
# Tags: compose, containers, infrastructure
# -----------------------------------------------------------------------------

version: "3.8"

networks:
  digi-net:
    driver: bridge

volumes:
  pg_data:
  neo4j_data:
  chroma_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backup_cache:

services:
  # PostgreSQL with multi-database support
  postgres:
    image: postgres:15
    container_name: digi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-digi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-digi}
      POSTGRES_DB: ${POSTGRES_DB:-digi}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-digi_core,lernmi,beep_boop}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - digi-net
    ports:
      - "5432:5432"  # Expose for external connections

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.18
    container_name: digi-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD:-digi}"
      NEO4J_dbms_default__database=neo4j
    volumes:
      - neo4j_data:/data
    networks:
      - digi-net
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:1.0.15
    container_name: digi-chroma
    restart: unless-stopped
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - digi-net
    ports:
      - "8001:8000"

  # Redis Cache
  redis:
    image: redis:7
    container_name: digi-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - digi-net
    ports:
      - "6379:6379"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: digi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - digi-net

  grafana:
    image: grafana/grafana:latest
    container_name: digi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - digi-net

  # Backup Service
  backup-sidecar:
    image: restic/restic:latest
    container_name: digi-backup
    depends_on:
      - postgres
      - neo4j
      - chroma
      - redis
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
    volumes:
      - pg_data:/backup/pg_data:ro
      - neo4j_data:/backup/neo4j_data:ro
      - chroma_data:/backup/chroma_data:ro
      - redis_data:/backup/redis_data:ro
      - backup_cache:/root/.cache/restic
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "echo '0 3 * * * restic backup /backup && restic forget --prune --keep-daily 7 --keep-weekly 4 --keep-monthly 6' > /etc/crontabs/root && crond -f -d 8"
    networks:
      - digi-net


