# -----------------------------------------------------------------------------
# File: docker-compose.yml
# Purpose: Core infrastructure services for digi-infrastructure
# Related: config/env.example, scripts/init-multiple-databases.sh
# Tags: compose, containers, infrastructure
# -----------------------------------------------------------------------------

networks:
  digi-net:
    driver: bridge

volumes:
  pg_data:
  neo4j_data:
  qdrant_data: # Replaces chroma_data
  qdrant_snapshots: # For backups and snapshots
  redis_data:
  prometheus_data:
  grafana_data:
  backup_cache:


services:
  # PostgreSQL with multi-database support
  postgres:
    image: postgres:15
    container_name: digi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-digi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-digi}
      POSTGRES_DB: ${POSTGRES_DB:-digi}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-digi_core,lernmi,beep_boop,pcs}
      PCS_DB_PASSWORD: ${PCS_DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - digi-net
    ports:
      - "5432:5432" # Expose for external connections

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.18
    container_name: digi-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD:-digi_secure_123}"
      NEO4J_dbms_default__database: neo4j
    volumes:
      - neo4j_data:/data
    networks:
      - digi-net
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt

  # Qdrant Vector Database (REPLACES ChromaDB)
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: digi-qdrant
    restart: unless-stopped
    environment:
      # Performance and storage configuration
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: ${QDRANT_LOG_LEVEL:-INFO}

      # Storage configuration
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      QDRANT__STORAGE__SNAPSHOTS_PATH: /qdrant/snapshots
      QDRANT__STORAGE__ON_DISK_PAYLOAD: true
      QDRANT__STORAGE__WAL_CAPACITY_MB: 32
      QDRANT__STORAGE__WAL_SEGMENTS_AHEAD: 0

      # Performance optimization
      QDRANT__SERVICE__MAX_REQUEST_SIZE_MB: 32
      QDRANT__SERVICE__MAX_WORKERS: 0 # Auto-detect CPU cores
      QDRANT__SERVICE__ENABLE_CORS: true

      # Security (production)
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
      QDRANT__SERVICE__READ_ONLY: false

      # Clustering (for future scaling)
      QDRANT__CLUSTER__ENABLED: false
      QDRANT__CLUSTER__P2P__PORT: 6335

      # Telemetry and monitoring
      QDRANT__TELEMETRY_DISABLED: ${QDRANT_TELEMETRY_DISABLED:-false}

    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_snapshots:/qdrant/snapshots
    networks:
      - digi-net
    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7
    container_name: digi-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - digi-net
    ports:
      - "6379:6379"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: digi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - digi-net

  grafana:
    image: grafana/grafana:latest
    container_name: digi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - digi-net

  # Prompt and Context Service (PCS)
  pcs:
    build:
      context: ./pcs
      dockerfile: Dockerfile
    container_name: digi-pcs
    restart: unless-stopped
    environment:
      - PCS_ENVIRONMENT=${PCS_ENVIRONMENT:-production}
      - PCS_DEBUG=${PCS_DEBUG:-false}
      - PCS_SECURITY_SECRET_KEY=${PCS_SECURITY_SECRET_KEY}
      - PCS_SECURITY_JWT_SECRET_KEY=${PCS_SECURITY_JWT_SECRET_KEY}
      - PCS_DB_HOST=postgres
      - PCS_DB_PORT=5432
      - PCS_DB_USER=pcs_user
      - PCS_DB_PASSWORD=${PCS_DB_PASSWORD}
      - PCS_DB_NAME=pcs
      - PCS_REDIS_HOST=redis
      - PCS_REDIS_PORT=6379
      - PCS_REDIS_DB=3
      - PCS_QDRANT_HOST=qdrant
      - PCS_QDRANT_PORT=6333
      - PCS_NEO4J_URI=bolt://neo4j:7687
      - PCS_NEO4J_USER=neo4j
      - PCS_NEO4J_PASSWORD=${NEO4J_PASSWORD:-digi_secure_123}
    ports:
      - "8000:8000"
    volumes:
      - ./pcs/logs:/app/logs
    depends_on:
      - postgres
      - redis
      - qdrant
      - neo4j
    networks:
      - digi-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/health/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backup Service
  backup-sidecar:
    image: restic/restic:latest
    container_name: digi-backup
    depends_on:
      - postgres
      - neo4j
      - qdrant
      - redis
      - pcs
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
    volumes:
      - pg_data:/backup/pg_data:ro
      - neo4j_data:/backup/neo4j_data:ro
      - qdrant_data:/backup/qdrant_data:ro
      - redis_data:/backup/redis_data:ro
      - backup_cache:/root/.cache/restic
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "echo '0 3 * * * restic backup /backup && restic forget --prune --keep-daily 7 --keep-weekly 4 --keep-monthly 6' > /etc/crontabs/root && crond -f -d 8"
    networks:
      - digi-net
