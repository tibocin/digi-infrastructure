[project]
name = "pcs"
version = "1.0.0"
description = "Prompt and Context Service - Autonomous coding agent system"
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = { text = "MIT" }
authors = [{ name = "Digi Infrastructure Team", email = "team@digiinfra.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

dependencies = [
  "fastapi==0.104.1",
  "uvicorn[standard]==0.24.0",
  "sqlalchemy[asyncio]==2.0.23",
  "asyncpg==0.29.0",
  "pydantic[email]==2.5.0",
  "pydantic-settings==2.1.0",
  "redis[hiredis]==5.0.1",
  "neo4j==5.15.0",
  "qdrant-client>=1.7.0",
  "numpy<2.0.0",
  "structlog==23.2.0",
  "prometheus-client==0.19.0",
  "python-jose[cryptography]==3.3.0",
  "passlib[bcrypt]==1.7.4",
  "python-multipart==0.0.6",
  "httpx==0.25.2",
  "jinja2==3.1.2",
  "python-dateutil==2.8.2",
  "pytz==2023.3",
  "psutil>=7.0.0",
  "PyJWT==2.8.0",
  "openai>=1.102.0",
]

[project.optional-dependencies]
dev = [
  "pytest==7.4.3",
  "pytest-asyncio==0.21.1",
  "pytest-cov==4.1.0",
  "pytest-mock==3.12.0",
  "httpx==0.25.2",
  "black==23.11.0",
  "ruff==0.1.6",
  "mypy==1.7.1",
  "pre-commit==3.6.0",
  "aiosqlite==0.19.0",
]

prod = ["gunicorn==21.2.0", "sentry-sdk[fastapi]==1.39.1"]

docs = [
  "mkdocs==1.5.3",
  "mkdocs-material==9.4.8",
  "mkdocstrings[python]==0.24.0",
]

[project.urls]
Homepage = "https://github.com/your-org/digi-infrastructure"
Documentation = "https://docs.digiinfra.com"
Repository = "https://github.com/your-org/digi-infrastructure.git"
"Bug Tracker" = "https://github.com/your-org/digi-infrastructure/issues"

[project.scripts]
pcs = "pcs.main:main"
pcs-server = "pcs.main:run_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pcs"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["chromadb.*", "neo4j.*", "prometheus_client.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = ["ignore::UserWarning", "ignore::DeprecationWarning"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "psutil>=7.0.0",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
]
